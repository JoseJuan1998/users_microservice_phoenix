{
  "swagger": "2.0",
  "paths": {
    "/manager/users/{np}/{nr}": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "All Users",
        "responses": {
          "204": {
            "schema": {
              "$ref": "#/definitions/ShowUsersEmptyResponse"
            },
            "description": "No users"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/ShowUsersResponse"
            },
            "description": "Success"
          }
        },
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "authorization",
            "in": "header",
            "description": "Token to access"
          },
          {
            "type": "string",
            "required": true,
            "name": "np",
            "in": "path",
            "description": "The current page"
          },
          {
            "type": "string",
            "required": true,
            "name": "nr",
            "in": "path",
            "description": "The rows per page"
          }
        ],
        "operationId": "HangmanWeb.UserController.get_users",
        "description": "Return JSON with all users listed in the database",
        "deprecated": false
      }
    },
    "/manager/users/{id}": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Specific User",
        "responses": {
          "404": {
            "schema": {
              "$ref": "#/definitions/ShowUserResponseWrongId"
            },
            "description": "Id wrong"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/ShowUserResponse"
            },
            "description": "User created OK"
          }
        },
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "authorization",
            "in": "header",
            "description": "Token to access"
          },
          {
            "type": "string",
            "required": true,
            "name": "id",
            "in": "path",
            "description": "The id of the user"
          }
        ],
        "operationId": "HangmanWeb.UserController.get_user",
        "description": "Return JSON with an especific user",
        "deprecated": false
      },
      "delete": {
        "tags": [
          "User"
        ],
        "summary": "Specific User",
        "responses": {
          "400": {
            "schema": {
              "$ref": "#/definitions/DeleteUserResponseError"
            },
            "description": "Bad Request"
          },
          "205": {
            "schema": {
              "$ref": "#/definitions/DeleteUserResponse"
            },
            "description": "Deleted"
          }
        },
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "authorization",
            "in": "header",
            "description": "Token to access"
          },
          {
            "type": "string",
            "required": true,
            "name": "id",
            "in": "path",
            "description": "The id of the user"
          }
        ],
        "operationId": "HangmanWeb.UserController.delete_user",
        "description": "Return JSON with an especific user",
        "deprecated": false
      }
    },
    "/manager/users/reset/pass": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Send email reset password",
        "responses": {
          "400": {
            "schema": {
              "$ref": "#/definitions/ResetUserPasswordResponseError"
            },
            "description": "Bad Request"
          },
          "205": {
            "schema": {
              "$ref": "#/definitions/ResetUserPasswordResponse"
            },
            "description": "Updated"
          }
        },
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/ResetUserPasswordRequest"
            },
            "required": true,
            "name": "email",
            "in": "body",
            "description": "The user email"
          }
        ],
        "operationId": "HangmanWeb.UserController.send_reset_password",
        "description": "Search the user on the db and send the reset password email",
        "deprecated": false
      }
    },
    "/manager/users/pass/{id}": {
      "put": {
        "tags": [
          "User"
        ],
        "summary": "Update a user",
        "responses": {
          "400": {
            "schema": {
              "$ref": "#/definitions/UpdateUserPasswordResponseError"
            },
            "description": "Bad Request"
          },
          "205": {
            "schema": {
              "$ref": "#/definitions/UpdateUserPasswordResponse"
            },
            "description": "Updated"
          }
        },
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "authorization",
            "in": "header",
            "description": "Token to access"
          },
          {
            "type": "string",
            "required": true,
            "name": "id",
            "in": "path",
            "description": "The id of the user"
          },
          {
            "schema": {
              "$ref": "#/definitions/UpdateUserPasswordRequest"
            },
            "required": true,
            "name": "password",
            "in": "body",
            "description": "The user password"
          }
        ],
        "operationId": "HangmanWeb.UserController.update_password",
        "description": "Update the user password",
        "deprecated": false
      }
    },
    "/manager/users/name/{id}": {
      "put": {
        "tags": [
          "User"
        ],
        "summary": "Update a user",
        "responses": {
          "400": {
            "schema": {
              "$ref": "#/definitions/UpdateUserNameResponseError"
            },
            "description": "Bad Request"
          },
          "205": {
            "schema": {
              "$ref": "#/definitions/UpdateUserNameResponse"
            },
            "description": "Updated"
          }
        },
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "authorization",
            "in": "header",
            "description": "Token to access"
          },
          {
            "type": "string",
            "required": true,
            "name": "id",
            "in": "path",
            "description": "The id of the user"
          },
          {
            "schema": {
              "$ref": "#/definitions/UpdateUserNameRequest"
            },
            "required": true,
            "name": "name",
            "in": "body",
            "description": "The user name"
          }
        ],
        "operationId": "HangmanWeb.UserController.update_name",
        "description": "Update the user name",
        "deprecated": false
      }
    },
    "/manager/users": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Add a new user",
        "responses": {
          "400": {
            "schema": {
              "$ref": "#/definitions/CreateUserResponseErrors"
            },
            "description": "Bad Request"
          },
          "201": {
            "schema": {
              "$ref": "#/definitions/CreateUserResponse"
            },
            "description": "Created"
          }
        },
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "authorization",
            "in": "header",
            "description": "Token to access"
          },
          {
            "schema": {
              "$ref": "#/definitions/CreateUserRequest"
            },
            "required": true,
            "name": "user",
            "in": "body",
            "description": "The user data"
          }
        ],
        "operationId": "HangmanWeb.UserController.create_user",
        "description": "Create a new user in the database",
        "deprecated": false
      }
    },
    "/manager/logout": {
      "delete": {
        "tags": [
          "Session"
        ],
        "summary": "Delete session",
        "responses": {
          "205": {
            "description": "Session ended"
          }
        },
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "operationId": "HangmanWeb.SessionController.delete_session",
        "description": "Delete the session",
        "deprecated": false
      }
    },
    "/manager/login": {
      "post": {
        "tags": [
          "Session"
        ],
        "summary": "Create session",
        "responses": {
          "400": {
            "schema": {
              "$ref": "#/definitions/CreateSessionResponseError"
            },
            "description": "Bad Request"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/CreateSessionResponse"
            },
            "description": "Success"
          }
        },
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/CreateSessionRequest"
            },
            "required": false,
            "name": "user",
            "in": "body",
            "description": "The user details"
          }
        ],
        "operationId": "HangmanWeb.SessionController.create_session",
        "description": "Return the id of the user if it's found and the password is valid and create a session",
        "deprecated": false
      }
    }
  },
  "info": {
    "version": "1.0",
    "title": "Users API"
  },
  "host": "localhost:4000",
  "definitions": {
    "User": {
      "type": "object",
      "title": "User",
      "required": [
        "name"
      ],
      "properties": {
        "updated_at": {
          "type": "string",
          "format": "datetime",
          "description": "Update timestamp"
        },
        "name": {
          "type": "string",
          "description": "User name"
        },
        "inserted_at": {
          "type": "string",
          "format": "datetime",
          "description": "Creation timestamp"
        },
        "id": {
          "type": "integer",
          "description": "User ID"
        },
        "credential": {
          "$ref": "#/definitions/Credential"
        }
      },
      "description": "Managers for the words list"
    },
    "UpdateUserPasswordResponseError": {
      "type": "object",
      "title": "UpdateUserPasswordResponseError",
      "properties": {
        "users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/User"
          },
          "description": "The user updated"
        }
      },
      "example": {
        "password_confirmation1": "can't be blank",
        "password_confirmation": "does not match confirmation",
        "password2": "has invalid format",
        "password1": "can't be blank",
        "id2": "User not found",
        "id1": "can't be blank"
      },
      "description": "Response schema of a single user"
    },
    "UpdateUserPasswordResponse": {
      "type": "object",
      "title": "ShowUserResponse",
      "properties": {
        "users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/User"
          },
          "description": "The user updated"
        }
      },
      "example": {
        "user": {
          "name": "Jose",
          "lastname": "Rincón",
          "id": 1,
          "email": "juan@cordage.io",
          "admin": false,
          "active": true
        }
      },
      "description": "Response schema of a single user"
    },
    "UpdateUserPasswordRequest": {
      "type": "object",
      "title": "ShowUserResponse",
      "properties": {
        "users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/User"
          },
          "description": "The user password"
        }
      },
      "example": {
        "password_confirmation": "Qwerty2021",
        "password": "Qwerty2021"
      },
      "description": "Request params to update the password of a user"
    },
    "UpdateUserNameResponseError": {
      "type": "object",
      "title": "UpdateUserNameResponseError",
      "properties": {
        "users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/User"
          },
          "description": "The user updated"
        }
      },
      "example": {
        "id2": "User not found",
        "id1": "can't be blank"
      },
      "description": "Response schema of a single user"
    },
    "UpdateUserNameResponse": {
      "type": "object",
      "title": "ShowUserResponse",
      "properties": {
        "users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/User"
          },
          "description": "The user updated"
        }
      },
      "example": {
        "user": {
          "name": "Jose",
          "lastname": "Rincón",
          "id": 1,
          "email": "juan@cordage.io",
          "admin": false,
          "active": false
        }
      },
      "description": "Response schema of a single user"
    },
    "UpdateUserNameRequest": {
      "type": "object",
      "title": "ShowUserResponse",
      "properties": {
        "users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/User"
          },
          "description": "The user name"
        }
      },
      "example": {
        "name": "Jose",
        "lastname": "Rincón"
      },
      "description": "Reques params to update a name of the user"
    },
    "ShowUsersResponse": {
      "type": "object",
      "title": "CreateUserResponse",
      "properties": {
        "users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/User"
          },
          "description": "The list of users"
        }
      },
      "example": {
        "users": [
          {
            "name": "Juan",
            "lastname": "Rincón",
            "id": 1,
            "email": "juan@cordage.io",
            "admin": false,
            "active": false
          }
        ]
      },
      "description": "Response schema of the user created"
    },
    "ShowUsersEmptyResponse": {
      "type": "object",
      "title": "CreateUserResponse",
      "example": {
        "error": "There are no users"
      },
      "description": "Response error users empty"
    },
    "ShowUserResponseWrongId": {
      "type": "object",
      "title": "ShowUserErrorResponse",
      "example": {
        "id": "User not found"
      },
      "description": "Response error when id is wrong"
    },
    "ShowUserResponse": {
      "type": "object",
      "title": "ShowUserResponse",
      "properties": {
        "users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/User"
          },
          "description": "The user found"
        }
      },
      "example": {
        "user": {
          "name": "Juan",
          "lastname": "Rincón",
          "id": 1,
          "email": "juan@cordage.io",
          "admin": false,
          "active": false
        }
      },
      "description": "Response schema of a single user"
    },
    "ShowUserRequest": {
      "type": "object",
      "title": "ShowUserRequest",
      "description": "Request params to update a user"
    },
    "ResetUserPasswordResponseError": {
      "type": "object",
      "title": "FoundUserResponseByEmail",
      "example": {
        "email2": "Credential not found",
        "email1": "can't be blank"
      },
      "description": "Response error of search email"
    },
    "ResetUserPasswordResponse": {
      "type": "object",
      "title": "FoundUserResponseByEmail",
      "properties": {
        "users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/User"
          },
          "description": "The user founded"
        }
      },
      "example": {
        "user": {
          "name": "Jose",
          "lastname": "Rincón",
          "id": 1,
          "email": "juan@cordage.io",
          "admin": false,
          "active": true
        }
      },
      "description": "Response schema of a single user"
    },
    "ResetUserPasswordRequest": {
      "type": "object",
      "title": "FoundUserRequestByEmail",
      "properties": {
        "users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/User"
          },
          "description": "The user password"
        }
      },
      "example": {
        "email": "juan@cordage.io"
      },
      "description": "Request params to found a user to send email to reset password"
    },
    "DeleteUserResponseError": {
      "type": "object",
      "title": "DeleteUserResponse",
      "properties": {
        "users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/User"
          },
          "description": "The user deleted"
        }
      },
      "example": {
        "id2": "User not found",
        "id1": "can't be blank"
      },
      "description": "Response schema of a single user"
    },
    "DeleteUserResponse": {
      "type": "object",
      "title": "DeleteUserResponse",
      "properties": {
        "users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/User"
          },
          "description": "The user deleted"
        }
      },
      "example": {
        "user": {
          "name": "Juan",
          "lastname": "Rincón",
          "id": 1,
          "email": "juan@cordage.io",
          "admin": false,
          "active": false
        }
      },
      "description": "Response schema of a single user"
    },
    "DeleteUserRequest": {
      "type": "object",
      "title": "DeleteUserRequest",
      "description": "Request params to delete a user"
    },
    "Credential": {
      "type": "object",
      "title": "Credential",
      "required": [
        "active",
        "admin",
        "email"
      ],
      "properties": {
        "user": {
          "$ref": "#/definitions/User"
        },
        "updated_at": {
          "type": "string",
          "format": "datetime",
          "description": "Update timestamp"
        },
        "password_hash": {
          "type": "string"
        },
        "password_confirmation": {
          "type": "string",
          "description": "Virtual Password Confirmation"
        },
        "password": {
          "type": "string",
          "description": "Virtual Password"
        },
        "inserted_at": {
          "type": "string",
          "format": "datetime",
          "description": "Creation timestamp"
        },
        "id": {
          "type": "integer",
          "description": "Credential ID"
        },
        "email": {
          "type": "string",
          "description": "User Email"
        },
        "admin": {
          "type": "boolean",
          "description": "User is a Super Manenger"
        },
        "active": {
          "type": "boolean",
          "description": "User has verified email"
        }
      },
      "description": "Managers credential"
    },
    "CreateUserResponseErrors": {
      "type": "object",
      "title": "CreateUserResponseErrors",
      "example": {
        "name": "can't be blank",
        "lastname": "can't be blank",
        "credential": {
          "email2": "has invalid format",
          "email1": "can't be blank"
        }
      },
      "description": "Response errors from create user"
    },
    "CreateUserResponse": {
      "type": "object",
      "title": "CreateUserResponse",
      "properties": {
        "users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/User"
          },
          "description": "The user created"
        }
      },
      "example": {
        "user": {
          "name": "Juan",
          "lastname": "Rincón",
          "id": 1,
          "email": "juan@cordage.io",
          "admin": false,
          "active": false
        }
      },
      "description": "Response schema of the user created"
    },
    "CreateUserRequest": {
      "type": "object",
      "title": "CreateUserRequest",
      "properties": {
        "users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/User"
          },
          "description": "The user name and email"
        }
      },
      "example": {
        "name": "Juan",
        "email": "juan@cordage.io"
      },
      "description": "POST body for creating a user"
    },
    "CreateSessionResponseError": {
      "type": "object",
      "title": "CreateSessionResponse",
      "properties": {
        "users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/User"
          },
          "description": "The users details"
        }
      },
      "example": {
        "error5": "password can't be blank",
        "error4": "email can't be blank",
        "error3": "inactive account",
        "error2": "wrong password",
        "error1": "user not found"
      },
      "description": "Response and id"
    },
    "CreateSessionResponse": {
      "type": "object",
      "title": "CreateSessionResponse",
      "properties": {
        "users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/User"
          },
          "description": "The users details"
        }
      },
      "example": {
        "user_id": 1,
        "token_refresh": "SFMyNTY.g2gDYQduBgA01y8LfQFiAAFRgA.9mGWauIJ7RdO86yfQ_m9wvXefmb5kEy8yiI57yOOz5o",
        "token_auth": "SFMyNTY.g2gDYQduBgA01y8LfQFiAAFRgA.5IuDTyU07BU1DdTfVLPv5aDydsg7tdRNMhC33cL__NA"
      },
      "description": "Response and id"
    },
    "CreateSessionRequest": {
      "type": "object",
      "title": "CreateUserRequest",
      "properties": {
        "users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/User"
          },
          "description": "The users details"
        }
      },
      "example": {
        "password": "Qwerty2021",
        "email": "juan@cordage.io"
      },
      "description": "POST body for creating a user"
    }
  }
}